# -*- sh -*-
# Description
# ===========
#
# Switch to another environment.
#
# An environment is either a virtualenv-based environment, a Docker
# image or a Docker container. Virtualenv-based environments are
# expected to be in $WORKON_HOME.

emulate -L zsh
setopt nomonitor

local env=$1
local -a venv dimages dcontainers docker runtime
venv=($WORKON_HOME/*/bin/activate(.N:h:h:ft))

function _vbe_populate_docker() {
    (( $+commands[docker] )) && {
        dimages=( $(docker image list | awk '(NR > 1 && $1 !~ /^</){printf("%s:%s\n", $1,$2)}') )
        dcontainers=( $(docker container list | awk '(NR > 1){split($NF,names,/,/); for (i in names) printf("%s\n",names[i])}') )
    }
    (( $+commands[podman] )) && {
        pimages=( $(podman image list | awk '(NR > 1 && $1 !~ /^</){printf("%s:%s\n", $1,$2)}') )
        pcontainers=( $(podman container list | awk '(NR > 1){split($NF,names,/,/); for (i in names) printf("%s\n",names[i])}') )
    }
}

# No parameters, list available environment
[[ -n $env ]] || {
    _vbe_populate_docker
    print -u2 "List of available environments:"
    for env in $venv; do
        print " - [virtualenv] $env"
    done
    for image in $dimages; do
        print " - [docker    ] $image"
    done
    for container in $dcontainers; do
        print " - [docker    ] $container"
    done
    for image in $pimages; do
        print " - [podman    ] $image"
    done
    for container in $pcontainers; do
        print " - [podman    ] $container"
    done
    return 0
}
shift

# Compile sudo if needed
function _vbe_compile_sudo() {
    local sudo=$ZSHRUN/sudo
    if [[ ! -f $sudo ]] || (( $(zstat +mtime $ZSH/misc/sudo.c) > $(zstat +mtime $sudo) )); then
        if (( $+commands[gcc] )); then
            gcc -Wall -static $ZSH/misc/sudo.c -o $sudo
        elif (( $+commands[docker] )); then
            docker run --interactive --rm --volume=${sudo:h}:${sudo:h} alpine:latest \
                   sh -c "apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing tcc tcc-libs-static musl-dev \
                       && tcc -Wall -static -x c - -o $sudo && chown $UID:$GID $sudo" \
                   < $ZSH/misc/sudo.c
        fi
    fi
}

# Enter current Flake shell. Avoid it to being garbage collected.
[[ $env =~ "^\.(#.*)?" ]] && [[ -f flake.nix ]] && {
    nix develop "$@" $env -c sh -c "
[ -d result~ ] && find -P result~ -type l -delete
nix-store -r \$NIX_GCROOT --add-root result~ --indirect > /dev/null
SHELL=$(nix eval --raw nixpkgs#zsh)/bin/zsh
nix build --no-link \${SHELL}
exec env SHELL=\$SHELL \$SHELL
"
    return
}

# Otherwise, use current directory name
[[ $env == "." ]] && env=${PWD:t}

# Virtualenv
[[ ${venv[(r)$env]} == $env ]] && {(
    local activate="$WORKON_HOME/$env/bin/activate"
    local VIRTUAL_ENV_DISABLE_PROMPT=1
    local NODE_VIRTUAL_ENV_DISABLE_PROMPT=1
    source $activate # nowadays, it really just push virtualenv's bin in PATH

    append_path() {
        mkdir -p $1
        path=( $1 $path )
    }

    # Gems.
    # GEM_HOME is where gems will be installed.
    # GEM_PATH is where gems are searched
    export GEM_HOME=$VIRTUAL_ENV/gems
    export GEM_PATH=$GEM_HOME
    append_path $GEM_HOME/bin

    # Go
    export GOPATH=$VIRTUAL_ENV/go
    append_path $GOPATH/bin

    # C (install with ./configure --prefix=$VIRTUAL_ENV)
    export LD_LIBRARY_PATH=$VIRTUAL_ENV/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
    export PKG_CONFIG_PATH=$VIRTUAL_ENV/lib/pkgconfig
    append_path $VIRTUAL_ENV/sbin

    # OCaml (through OPAM)
    (( $+commands[opam] )) && {
        export OPAMROOT=$VIRTUAL_ENV/opam
        [[ -d $OPAMROOT ]] && \
            eval $(opam config env)
    }

    # node.js workaround
    [[ -z $NPM_CONFIG_PREFIX ]] || export npm_config_prefix=$NPM_CONFIG_PREFIX

    export PATH
    exec $SHELL -i
); return }

_vbe_populate_docker

# Docker images
runtime=()
[[ ${dimages[(r)$env]} == $env ]] && runtime=(docker)
[[ ${pimages[(r)$env]} == $env ]] && runtime=(podman)
(( $#runtime )) && {
    local image=${env}
    local tmp=$(mktemp -d)
    _vbe_compile_sudo
    <<EOF > $tmp/start
#!/bin/sh
for SHELL in ${SHELL}-static $SHELL /bin/bash /bin/sh; do
    [ ! -x \$SHELL ] || break
done
mkdir -p /tmp
chmod 1777 /tmp
echo $(getent passwd $(id -u)) >> /etc/passwd
echo $(getent group $(id -g)) >> /etc/group
mkdir -p /usr/bin
cp $HOME/.zsh/run/u/$HOST-$UID/sudo /usr/bin/sudo
chown 0:$(id -gn) /usr/bin/sudo
chmod 4750 /usr/bin/sudo
chown $(id -u):$(id -g) $HOME
[ ! -f /etc/nsswitch.conf ] || sed -i 's/ sss//' /etc/nsswitch.conf 2> /dev/null
exec env HOME=$HOME TERM=$TERM DOCKER_CHROOT_NAME=$env SHELL=\$SHELL SHLVL= \
     /usr/bin/sudo -u $(id -u) -g $(id -g) -c '$PWD' \$SHELL -i -l
EOF
    PODMAN_USERNS=keep-id $runtime container run -t -i \
           $([[ -d /usr/share/zsh ]] && print -- -v /usr/share/zsh:/usr/share/zsh-static:ro) \
           $([[ -x ${SHELL}-static ]] && print -- -v ${SHELL}-static:${SHELL}-static:ro) \
           -v ${ZDOTDIR:-$HOME}/.zshrc:$HOME/.zshrc:ro \
           -v ${ZDOTDIR:-$HOME}/.zshenv:$HOME/.zshenv:ro \
           -v ${ZSH}:$HOME/.zsh:ro \
           -v ${ZSH}/run:$HOME/.zsh/run:rw \
           $([[ ${PWD##$HOME/} != ${PWD} ]] && print -- -v ${PWD}:${PWD}:rw) \
           $([[ -d $ZSH/run/terminfo ]] && print -- -v $ZSH/run/terminfo:${HOME}/.terminfo:ro) \
           -v ${tmp}:${tmp} \
           -w $PWD \
           -u 0 \
           --rm \
           -h ${${${image##*/}:gs/:/-}:gs/./-} \
           --entrypoint /bin/sh \
           "$@" \
           $image $tmp/start
    local ret=$?
    rm -f $tmp/start && rmdir $tmp
    return $ret
}

# Docker containers
runtime=()
[[ ${dcontainers[(r)$env]} == $env ]] && runtime=(docker)
[[ ${pcontainers[(r)$env]} == $env ]] && runtime=(podman)
(( $#runtime )) && {
    local id=$($runtime container inspect --format '{{.State.Pid}}' $env)

    # We need to mount $HOME inside the container, that's quite
    # hacky: we get the device we need to mount, we mount it
    # somewhere, then bind mount the home directory in the right
    # place. All this with elevated privileges. We also create our
    # user, with sudo rights. Most inspiration comes from here:
    #  http://blog.dehacked.net/lxc-getting-mounts-into-a-running-container/
    #
    # Also, from Docker 0.9, see:
    #  http://jpetazzo.github.io/2014/03/23/lxc-attach-nsinit-nsenter-docker-0-9/
    #  http://www.sebastien-han.fr/blog/2014/01/27/access-a-container-without-ssh/
    #
    # From Docker 1.3, see `docker exec'.
    #
    # So, this needs nsenter which needs a recent util-linux.
    #
    # Using a mount namespace, we try to keep our changes invisible
    # to the underlying container. However, some directories and files
    # are created: tmp, home directory, /usr/bin/sudo, /bin/zsh-static, /etc/passwd,
    # /etc/shadow.
    #
    # The user inside the container has the same right than the one
    # inside the shell. So, you can hack processes from the container
    # but processes from the container can hack you too. I don't think
    # there is a way to change that since we are not the parent of the
    # container.
    #
    # This only works if the container has some base utils (sh,
    # unshare, mount, mktemp) installed. mount supports "-N" to work
    # on other namespaces, but we would still need unshare to work.
    #
    # --mount-only will not enter pid, network or IPC namespace
    local -a nsenter_args=(-m -u)
    case $2 in
        --mount-only)
            :
            ;;
        "")
            nsenter_args=($nsenter_args -i -n -p)
            ;;
        *)
            >&2 echo "unknown additional argument $2"
            return 1
            ;;
    esac
    local homemnt=${${(f)"$(df --output=target $HOME)"}[-1]}
    local homedev=$(readlink -f ${${(f)"$(df --output=source $HOME)"}[-1]})
    local rootdev=$(readlink -f ${${(f)"$(df --output=source /)"}[-1]})
    local enter=$(mktemp --tmpdir nsenter-XXXXXXXXX)
    local -a environ
    environ=(${(@f)"$($runtime container inspect --format "{{range .Config.Env}}{{.}}"$'\n'"{{end}}" $env)"})
    for ((i = 1; i <= $#environ; i++)) {
            if [[ ${environ[$i]%%=*} =~ ^[a-zA-Z_]+[a-zA-Z0-9_]*$ ]]; then
                environ[$i]="export ${environ[$i]%%=*}=${(q-)${environ[$i]#*=}}"
            else
                environ[$i]=""
            fi
    }
    _vbe_compile_sudo
    (( $+commands[tic] )) && (( $+commands[infocmp] )) && infocmp $TERM | tic -
    ${=${(%):-%(!..sudo -v)}}
    ${=${(%):-%(!..sudo -n)}} =nsenter $nsenter_args -t $id -- unshare --mount --propagation private /bin/sh -ec "
#!/bin/sh
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
tmp=\$(mktemp -d)
mkdir -p ${HOME}
mount -t tmpfs tmpfs \$tmp      # everything in $tmp will be invisible
mknod \$tmp/home-directory b $(($(stat -c 0x%t ${homedev}))) $(($(stat -c 0x%T ${homedev})))
mkdir \$tmp/home
mount -n \$tmp/home-directory \$tmp/home
mount -n --bind \$tmp/home/${HOME#$homemnt} $HOME
umount -n \$tmp/home
for f in passwd group; do
  if [ -f /etc/\$f ]; then
    cp /etc/\$f \$tmp/\$f
  else
    touch /etc/\$f
    touch \$tmp/\$f
  fi
  mount -n --bind \$tmp/\$f /etc/\$f
done
echo $(getent passwd $(id -u)) >> /etc/passwd
echo $(getent group $(id -g)) >> /etc/group
cp $ZSH/run/u/$HOST-$UID/sudo \$tmp/sudo
mkdir -p /usr/bin /bin
[ -f /usr/bin/sudo ] || touch /usr/bin/sudo
chown 0:$(id -gn) \$tmp/sudo
chmod 4750 \$tmp/sudo
mount -n --bind \$tmp/sudo /usr/bin/sudo

# Install zsh-static if available
if [ $+commands[zsh-static] -eq 1 ]; then
  mknod \$tmp/root-directory b $(($(stat -c 0x%t ${rootdev}))) $(($(stat -c 0x%T ${rootdev})))
  mkdir \$tmp/root
  mount -n \$tmp/root-directory \$tmp/root
  mkdir -p /usr/share/zsh-static
  [ -f $commands[zsh-static] ] || touch $commands[zsh-static]
  mount -n --bind \$tmp/root/$commands[zsh-static] $commands[zsh-static]
  mount -n --bind \$tmp/root/usr/share/zsh /usr/share/zsh-static
  umount -n \$tmp/root
fi

for SHELL in $commands[zsh-static] $SHELL /bin/bash /bin/sh; do
    [ ! -x \$SHELL ] || break
done

${(pj:\n:)environ}
exec env ZSH=$ZSH ${ZDOTDIR+ZDOTDIR=$ZDOTDIR} HOME=$HOME TERM=$TERM DOCKER_CHROOT_NAME=$env SHLVL= \
   /usr/bin/sudo -u $(id -u) -g $(id -g) -c \$PWD \$SHELL -i -l
"
    return
}

print "ERROR: environment $env does not exist"
return 2
